[
    {
        "id": "52db14a4.a6e214",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": ""
    },
    {
        "id": "48223529.f6edb4",
        "type": "http request",
        "z": "52db14a4.a6e214",
        "name": "getLast2Docs",
        "method": "GET",
        "ret": "obj",
        "url": "https://c3018fd1-e69b-44fd-948d-24f84a957c12-bluemix.cloudant.com/iotdb/_design/carProbe/_view/alldocs?limit=2&descending=true",
        "tls": "",
        "x": 563.3929443359375,
        "y": 300.9285583496094,
        "wires": [
            [
                "5990005c.7bc6d"
            ]
        ]
    },
    {
        "id": "7e1604ea.4eef44",
        "type": "function",
        "z": "52db14a4.a6e214",
        "name": "setArg2 (1st point)",
        "func": "msg.payload = msg.payload.rows[0].value; //JSON object containing values related to the current Car Probe Point\n\n//Add the following to the data to that retrieved from the Cloudant NoSQL DB\n//Set initial values for heading, longitude, latitude, velocity vectors,resultant speed and distance travelled\nmsg.payload.heading = 90; //Angle of moving direction, North is 0 and value increases clockwise (in degrees)\nmsg.payload.latitude = 40.768216; //Latitude in degrees\nmsg.payload.longitude = -74.18529; //Longitude in degrees\nmsg.payload.V_x = 0; // Velocity in the x direction (in m/s)\nmsg.payload.V_y = 0; // Velocity in the y direction (in m/s)\nmsg.payload.V_z = 0; // Velocity in the z direction (in m/s)\nmsg.payload.Sr = 0; // Resultant speed (in m/s)\nmsg.payload.distance = 0; // Distance travelled (in m)\nglobal.set(\"distance\",0); // Set total distance travelled to 0 (in m)\n\n//Url to be passed to update the doc to which the above data should belong to\nvar url= \"https://c3018fd1-e69b-44fd-948d-24f84a957c12-bluemix.cloudant.com/iotdb/\" + msg.payload._id + \"?rev=\" + msg.payload._rev;\nmsg.url = url;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 973.1429443359375,
        "y": 255.17855834960938,
        "wires": [
            [
                "a62bed1e.ccdd58"
            ]
        ]
    },
    {
        "id": "a2c2e0d5.934918",
        "type": "function",
        "z": "52db14a4.a6e214",
        "name": "SetArgs1",
        "func": "//Add the following to the data sent be RPI Zero (acceleration in x,y&z direction (in m/s^2), IR (digital value), Ultra-Sonic (in cm))\n//Set a trip ID\n\n//Set road type\n\n//Set timestamp\nvar date = new Date();\ndate.setTime(date.getTime() + (4*60*60*1000)); //Added 4hrs as the timezone is Asia/Dubai (can use moment module and set the timezone)\nmsg.payload.timestamp = date.toISOString();\n\n//Set time of the day\nvar hours = date.getHours();\nmsg.payload.hour = hours;\nif (hours>=0 && hours<12){\n    msg.payload.time_of_day = \"Morning\";\n}else if (hours>=12 && hours<16){\n    msg.payload.time_of_day = \"Afternoon\";\n}else if (hours>=16 && hours<20){\n    msg.payload.time_of_day = \"Evening\";\n}else{\n    msg.payload.time_of_day = \"Night\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 211.64288330078125,
        "y": 301.4285583496094,
        "wires": [
            [
                "ef98773f.da46b",
                "6defd29a.7c0b94",
                "1ceea87b.7829f"
            ]
        ]
    },
    {
        "id": "5990005c.7bc6d",
        "type": "switch",
        "z": "52db14a4.a6e214",
        "name": "# CarProbePoints",
        "property": "payload.total_rows",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "gte",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 773.6429138183594,
        "y": 300.9285583496094,
        "wires": [
            [
                "7e1604ea.4eef44"
            ],
            [
                "7be5c1e1.d7fa18"
            ]
        ]
    },
    {
        "id": "7be5c1e1.d7fa18",
        "type": "function",
        "z": "52db14a4.a6e214",
        "name": "setArg2",
        "func": "prev_point = msg.payload.rows[1].value; //JSON object containing values related to the previous Car Probe Point\nmsg.payload = msg.payload.rows[0].value; //JSON object containing values related to the current Car Probe Point\n\n//Find time difference between the two Car Probe Point (in s). It will be used for calculating some of the values\nt_diff = msg.payload.t_diff = (Math.abs(new Date(msg.payload.timestamp) - new Date(prev_point.timestamp)))/1000;\n\n//Add the following to the data to that retrieved from the Cloudant NoSQL DB\n//Set values for heading, longitude, latitude, velocity vectors,resultant speed and distance travelled\nmsg.payload.V_x = prev_point.V_x + msg.payload.acc_x*t_diff; // Velocity in the x direction (in m/s)\nmsg.payload.V_y = prev_point.V_y + msg.payload.acc_y*t_diff; // Velocity in the y direction (in m/s)\nmsg.payload.V_z = prev_point.V_z + msg.payload.acc_z*t_diff; // Velocity in the z direction (in m/s)\n\n// Calculate Resultant speed (in m/s)\nmsg.payload.Sr = Math.sqrt( Math.pow(msg.payload.V_x, 2) + Math.pow(msg.payload.V_y, 2) + Math.pow(msg.payload.V_z, 2) );\n\n//Calculate Distance travelled (in m)\nmsg.payload.distance = msg.payload.Sr * t_diff;\nglobal.set(\"distance\", global.get(\"distance\") + msg.payload.distance); // update total distance (in m)\n\nif (msg.payload.distance !== 0){\n    //Calculate new heading //Angle of moving direction, North is 0 and value increases clockwise (in degrees)\n\tmsg.payload.heading = Math.acos(msg.payload.V_y/msg.payload.distance)*180/Math.PI;\n\t\n\t//Longitude and Latitude of previous Car Probe Point (in degrees)\n\tlat1 = prev_point.latitude;\n\tlon1 = prev_point.longitude;\n\n\tvar radius = 6371e6; // (Mean) radius of earth in meters\n\tvar toRadians = function(v) { return v * Math.PI / 180; };\n\tvar toDegrees = function(v) { return v * 180 / Math.PI; };\n\n\tvar angular_dist = msg.payload.distance / radius; // angular distance in radians\n\tvar heading_rad = toRadians(msg.payload.heading);\n\n\tvar lat1_rad = toRadians(lat1);\n\tvar lon1_rad = toRadians(lon1);\n\n\tvar sin_lat1_rad = Math.sin(lat1_rad), cos_lat1_rad = Math.cos(lat1_rad);\n\tvar sin_angular_dist = Math.sin(angular_dist), cos_angular_dist = Math.cos(angular_dist);\n\tvar sin_heading_rad = Math.sin(heading_rad), cos_heading_rad = Math.cos(heading_rad);\n\n\tvar sin_lat2_rad = sin_lat1_rad*cos_angular_dist + cos_lat1_rad*sin_angular_dist*cos_heading_rad;\n\tvar lat2_rad = Math.asin(sin_lat2_rad);\n\tvar y = sin_heading_rad * sin_angular_dist * cos_lat1_rad;\n\tvar x = cos_angular_dist - sin_lat1_rad * sin_lat2_rad;\n\tvar lon2_rad = lon1_rad + Math.atan2(y, x);\n\n\tvar lat2 = toDegrees(lat2_rad);\n\tvar lon2 = (toDegrees(lon2_rad)+540)%360-180; // normalise to âˆ’180..+180 degrees\n\n\tmsg.payload.latitude = lat2;\n\tmsg.payload.longitude = lon2;\n\n}else{\n    //If no deistance is travelled use the heading, longitude and latitude of the previous Car Probe Point\n\tmsg.payload.heading = prev_point.heading;\n\tmsg.payload.latitude = prev_point.latitude;\n\tmsg.payload.longitude = prev_point.longitude;\n}\n\n//Url to be passed to update the doc to which the above data should belong to\nvar url= \"https://c3018fd1-e69b-44fd-948d-24f84a957c12-bluemix.cloudant.com/iotdb/\" + msg.payload._id + \"?rev=\" + msg.payload._rev;\nmsg.url = url;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 949.6429138183594,
        "y": 341.4285583496094,
        "wires": [
            [
                "a62bed1e.ccdd58"
            ]
        ]
    },
    {
        "id": "ef98773f.da46b",
        "type": "delay",
        "z": "52db14a4.a6e214",
        "name": "",
        "pauseType": "delay",
        "timeout": "150",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 387.89288330078125,
        "y": 300.9285583496094,
        "wires": [
            [
                "48223529.f6edb4"
            ]
        ]
    },
    {
        "id": "a62bed1e.ccdd58",
        "type": "http request",
        "z": "52db14a4.a6e214",
        "name": "Update",
        "method": "PUT",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1213.8928833007812,
        "y": 306.4285583496094,
        "wires": [
            [
                "baaf11f5.a312d8"
            ]
        ]
    },
    {
        "id": "53c71de7.2b70bc",
        "type": "function",
        "z": "52db14a4.a6e214",
        "name": "Driving behavior",
        "func": "var prev_Sr = msg.payload.rows[1].value.Sr; // JSON object containing values related to the previous Car Probe Point\nvar curr_Sr = msg.payload.rows[0].value.Sr; // JSON object containing values related to the current Car Probe Point\nvar thres_Sr_diff = 4; // Threshold to determine harsh acceleration and braking\nvar thres_Sr = 15; // Threshold to determine overspeeding\n\n// Variables used to determine if acceleration, braking and stopping are happening frequently\nvar stop = 0;\nvar freq_acc = 0;\nvar freq_brake = 0;\n\nvar thres_count = 3; // Threshold of when to consider calculating frequent acceleration, braking and stopping\n\n//Set Harsh Acceleration //recognized if the acceleration data exceeds a threshold value\nmsg.payload.rows[0].value.harsh_acc = (curr_Sr - prev_Sr) > thres_Sr_diff;\nif(msg.payload.rows[0].value.harsh_acc === true){ //set frequency at which Harsh Acceleration happens\n    global.set(\"harsh_acc_count\", global.get(\"harsh_acc_count\") + 1);\n}\n\n//Set Harsh Braking //recognized if the deceleration exceeds the threshold value\nmsg.payload.rows[0].value.harsh_brake = (curr_Sr - prev_Sr) < -thres_Sr_diff;\nif(msg.payload.rows[0].value.harsh_brake === true){ //set frequency at which Harsh Braking happens\n    global.set(\"harsh_brake_count\", global.get(\"harsh_brake_count\") + 1);\n}\n\n//Set Overspeeding //Based on a threshold value\nmsg.payload.rows[0].value.overspeed = curr_Sr > thres_Sr; \nif(msg.payload.rows[0].value.overspeed === true){ //set frequency at which Overspeeding happens\n    global.set(\"overspeed_count\", global.get(\"overspeed_count\") + 1);\n}\n\n//Calculate frequent acceleration, braking and stopping\nif(msg.payload.total_rows > 5){\n\tfor (var i in msg.payload.rows){\n\t\tif(msg.payload.rows[i].value.Sr === 0){\n\t\t\tstop++;\n\t\t}\n\n\t\tif(msg.payload.rows[i].value.harsh_acc === true){\n\t\t\tfreq_acc++;\n\t\t}\n\n\t\tif(msg.payload.rows[i].value.harsh_brake === true){\n\t\t\tfreq_brake++;\n\t\t}\n\t}\n}\n\n//Set Frequent stopping //Frequent stops are recognized if there are many stop instances within a certain range of Car Probe Points\nmsg.payload.rows[0].value.freq_stop = stop > thres_count; \nif(msg.payload.rows[0].value.freq_stop === true){ //set frequency at which Frequent stopping happens\n    global.set(\"freq_stop_count\", global.get(\"freq_stop_count\") + 1);\n}\n\n//Set Frequent Acceleration //Frequent acceleration is detected if the driver frequently exceeds the threshold value within a certain range of Car Probe Points\nmsg.payload.rows[0].value.freq_acc = freq_acc > thres_count;\nif(msg.payload.rows[0].value.freq_acc === true){ //set frequency at which Frequent Acceleration happens\n    global.set(\"freq_acc_count\", global.get(\"freq_acc_count\") + 1);\n}\n\n//Set Frequent Braking //Frequent deceleration is recognized if the driver exceeds the threshold value frequently within a certain range of Car Probe Points\nmsg.payload.rows[0].value.freq_brake = freq_brake > thres_count;\nif(msg.payload.rows[0].value.freq_brake === true){ //set frequency at which Frequent Braking happens\n    global.set(\"freq_brake_count\", global.get(\"freq_brake_count\") + 1);\n}\n\nmsg.payload = msg.payload.rows[0].value;\n\n//Url to be passed to update the doc to which the above data should belong to\nvar url= \"https://c3018fd1-e69b-44fd-948d-24f84a957c12-bluemix.cloudant.com/iotdb/\" + msg.payload._id + \"?rev=\" + msg.payload._rev;\nmsg.url = url;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2107.1429443359375,
        "y": 322.1785583496094,
        "wires": [
            [
                "80c30fc4.3d38a"
            ]
        ]
    },
    {
        "id": "ff4afb93.a7d8a8",
        "type": "http request",
        "z": "52db14a4.a6e214",
        "name": "getLast10Docs",
        "method": "GET",
        "ret": "obj",
        "url": "https://c3018fd1-e69b-44fd-948d-24f84a957c12-bluemix.cloudant.com/iotdb/_design/carProbe/_view/alldocs?limit=10&descending=true",
        "tls": "",
        "x": 1538.3929443359375,
        "y": 305.1785583496094,
        "wires": [
            [
                "b6c71dc4.b5493"
            ]
        ]
    },
    {
        "id": "baaf11f5.a312d8",
        "type": "delay",
        "z": "52db14a4.a6e214",
        "name": "",
        "pauseType": "delay",
        "timeout": "150",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1365.6429443359375,
        "y": 305.9285583496094,
        "wires": [
            [
                "ff4afb93.a7d8a8"
            ]
        ]
    },
    {
        "id": "80c30fc4.3d38a",
        "type": "http request",
        "z": "52db14a4.a6e214",
        "name": "Update",
        "method": "PUT",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2368.3929748535156,
        "y": 306.9285583496094,
        "wires": [
            [
                "352fac20.5955e4"
            ]
        ]
    },
    {
        "id": "cf43939f.67e76",
        "type": "switch",
        "z": "52db14a4.a6e214",
        "name": "# CarProbePoints",
        "property": "payload.total_rows",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "gte",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1897.1429443359375,
        "y": 304.6785583496094,
        "wires": [
            [
                "ae8b2716.8e6de8"
            ],
            [
                "53c71de7.2b70bc"
            ]
        ]
    },
    {
        "id": "ae8b2716.8e6de8",
        "type": "function",
        "z": "52db14a4.a6e214",
        "name": "Driving behavior (1st point)",
        "func": "//Set the initial values for harsh acceleration, harsh braking and overspeeding to false\n//Set Harsh Acceleration //recognized if the acceleration data exceeds a threshold value\nmsg.payload.rows[0].value.harsh_acc = false;\nglobal.set(\"harsh_acc_count\", 0); //set frequency at which Harsh Acceleration happens (initially 0)\n\n//Set Harsh Braking //recognized if the deceleration exceeds the threshold value\nmsg.payload.rows[0].value.harsh_brake = false;\nglobal.set(\"harsh_brake_count\", 0); //set frequency at which Harsh Braking happens (initially 0)\n\n//Set Overspeeding //Based on a threshold value\nmsg.payload.rows[0].value.overspeed = false;\nglobal.set(\"overspeed_count\", 0); //set frequency at which Overspeeding happens (initially 0)\n\n//Set the initial values for frequent stopping, frequent acceleration and frequent braking to false\n//Set Frequent stopping //Frequent stops are recognized if there are many stop instances within a certain range of Car Probe Points\nmsg.payload.rows[0].value.freq_stop = false; \nglobal.set(\"freq_stop_count\", 0); //set frequency at which Frequent stopping happens (initially 0)\n\n//Set Frequent Acceleration //Frequent acceleration is detected if the driver frequently exceeds the threshold value within a certain range of Car Probe Points\nmsg.payload.rows[0].value.freq_acc = false;\nglobal.set(\"freq_acc_count\", 0); //set frequency at which Frequent Acceleration happens (initially 0)\n\n//Set Frequent Braking //Frequent deceleration is recognized if the driver exceeds the threshold value frequently within a certain range of Car Probe Points\nmsg.payload.rows[0].value.freq_brake = false;\nglobal.set(\"freq_brake_count\", 0); //set frequency at which Frequent Braking happens (initially 0)\n\nmsg.payload = msg.payload.rows[0].value;\n\n//Url to be passed to update the doc to which the above data should belong to\nvar url= \"https://c3018fd1-e69b-44fd-948d-24f84a957c12-bluemix.cloudant.com/iotdb/\" + msg.payload._id + \"?rev=\" + msg.payload._rev;\nmsg.url = url;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2148.6428833007812,
        "y": 277.4285888671875,
        "wires": [
            [
                "80c30fc4.3d38a"
            ]
        ]
    },
    {
        "id": "6defd29a.7c0b94",
        "type": "function",
        "z": "52db14a4.a6e214",
        "name": "Display IR",
        "func": "IR = msg.payload.IR;\n\nmsg = {topic:\"IR\", payload:IR};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 526.6428833007812,
        "y": 438.4285888671875,
        "wires": [
            [
                "b0962897.5f842"
            ]
        ]
    },
    {
        "id": "1ceea87b.7829f",
        "type": "function",
        "z": "52db14a4.a6e214",
        "name": "Display Acceleration (x)",
        "func": "X = msg.payload.acc_x;\n\nmsg = {topic:\"X\", payload:X};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 563.0715942382812,
        "y": 547.2858276367188,
        "wires": [
            [
                "4a11d68.d81ac28"
            ]
        ]
    },
    {
        "id": "b0962897.5f842",
        "type": "ui_gauge",
        "z": "52db14a4.a6e214",
        "name": "Infra-Red",
        "group": "7cb405ca.50016c",
        "order": 5,
        "width": "0",
        "height": "0",
        "gtype": "donut",
        "title": "Infra-Red",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#b54231",
            "#e6e600",
            "#00ca14"
        ],
        "seg1": "",
        "seg2": "",
        "x": 792.6428833007812,
        "y": 440.4285888671875,
        "wires": []
    },
    {
        "id": "4a11d68.d81ac28",
        "type": "ui_chart",
        "z": "52db14a4.a6e214",
        "name": "",
        "group": "ceef7f6e.788718",
        "order": 1,
        "width": "0",
        "height": "0",
        "label": "Car Velocity",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "0",
        "dot": true,
        "ymin": "-5",
        "ymax": "5",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "x": 802.0715942382812,
        "y": 548.2858276367188,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "b6c71dc4.b5493",
        "type": "delay",
        "z": "52db14a4.a6e214",
        "name": "",
        "pauseType": "delay",
        "timeout": "300",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1713.8929443359375,
        "y": 305.4285888671875,
        "wires": [
            [
                "cf43939f.67e76"
            ]
        ]
    },
    {
        "id": "352fac20.5955e4",
        "type": "function",
        "z": "52db14a4.a6e214",
        "name": "Harsh Behavior Frequency",
        "func": "harsh_acc_ctr = global.get(\"harsh_acc_count\");\nharsh_brake_ctr = global.get(\"harsh_brake_count\");\n\nmsg1 = {topic:\"Harsh Acc.\", payload:harsh_acc_ctr};\nmsg2 = {topic:\"Harsh Brake\", payload:harsh_brake_ctr};\n\nreturn [msg1, msg2];",
        "outputs": "2",
        "noerr": 0,
        "x": 2618.6428833007812,
        "y": 298.1785583496094,
        "wires": [
            [
                "e92c7fdd.a9a68"
            ],
            [
                "e92c7fdd.a9a68"
            ]
        ]
    },
    {
        "id": "e92c7fdd.a9a68",
        "type": "ui_chart",
        "z": "52db14a4.a6e214",
        "name": "",
        "group": "ceef7f6e.788718",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Harsh Behaviors Frequency",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "40",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "x": 2935.8928833007812,
        "y": 299.4285583496094,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "7cb405ca.50016c",
        "type": "ui_group",
        "z": "",
        "name": "Gauges",
        "tab": "9b46182d.554848",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "ceef7f6e.788718",
        "type": "ui_group",
        "z": "",
        "name": "Graphs",
        "tab": "9b46182d.554848",
        "order": 2,
        "disp": true,
        "width": "6"
    },
    {
        "id": "9b46182d.554848",
        "type": "ui_tab",
        "z": "5fece382.b743ac",
        "name": "Dashboard",
        "icon": "dashboard"
    }
]